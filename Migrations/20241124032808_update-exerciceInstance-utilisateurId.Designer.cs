// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetSynthese.Server;

#nullable disable

namespace ProjetSynthese.Server.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241124032808_update-exerciceInstance-utilisateurId")]
    partial class updateexerciceInstanceutilisateurId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroupeCoursEtudiant", b =>
                {
                    b.Property<int>("GroupeCoursId")
                        .HasColumnType("int");

                    b.Property<int>("EtudiantId")
                        .HasColumnType("int");

                    b.HasKey("GroupeCoursId", "EtudiantId");

                    b.HasIndex("EtudiantId");

                    b.ToTable("GroupeCoursEtudiant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Activite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuteurId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateEcheance")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePublication")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupeCoursId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchiver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublique")
                        .HasColumnType("bit");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroActivite")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuteurId");

                    b.HasIndex("GroupeCoursId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Enseignant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NoEnseignant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilisateurId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId")
                        .IsUnique();

                    b.ToTable("Enseignants");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Etudiant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilisateurId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("numeroEtudiant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId")
                        .IsUnique();

                    b.ToTable("Etudiants");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.ExcludeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("End")
                        .HasColumnType("int");

                    b.Property<int>("Start")
                        .HasColumnType("int");

                    b.Property<int>("VariableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariableId");

                    b.ToTable("ExcludeRanges");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Exercice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiviteId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("AuteurId")
                        .HasColumnType("int");

                    b.Property<bool>("DemarcheDisponible")
                        .HasColumnType("bit");

                    b.Property<string>("Enonce")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublique")
                        .HasColumnType("bit");

                    b.Property<int>("NumeroExercice")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActiviteId");

                    b.HasIndex("AuteurId");

                    b.ToTable("Exercices");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.ExerciceInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateGenere")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EtudiantId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciceId")
                        .HasColumnType("int");

                    b.Property<string>("UtilisateurId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EtudiantId");

                    b.HasIndex("ExerciceId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("ExercicesInstance");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.GroupeCours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archiver")
                        .HasColumnType("bit");

                    b.Property<string>("Campus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnseignantId")
                        .HasColumnType("int");

                    b.Property<string>("EtudiantIdBloquer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lien")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numgroupe")
                        .HasColumnType("int");

                    b.Property<int>("SN")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnseignantId");

                    b.ToTable("LsGroupeCours");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Indice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Essaies")
                        .HasColumnType("int");

                    b.Property<string>("IndiceText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Indices");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiviteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActiviteId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Question.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("DemanderDemarche")
                        .HasColumnType("bit");

                    b.Property<string>("Enonce")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciceId")
                        .HasColumnType("int");

                    b.Property<int>("Pointage")
                        .HasColumnType("int");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciceId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<string>("QuestionType").HasValue("QuestionBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.RappelActivite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiviteId")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<int>("TimeFrame")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActiviteId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("RappelsActivite");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Reponse.ReponseBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("ReponseType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Valeur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Reponses");

                    b.HasDiscriminator<string>("ReponseType").HasValue("ReponseBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.ReponseUtilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateRepondu")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExerciceInstanceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Valeur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciceInstanceId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ReponsesUtilisateur");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Variable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciceId")
                        .HasColumnType("int");

                    b.Property<float>("Increment")
                        .HasColumnType("real");

                    b.Property<float>("Max")
                        .HasColumnType("real");

                    b.Property<float>("Min")
                        .HasColumnType("real");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciceId");

                    b.ToTable("Variables");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.VariableInstance", b =>
                {
                    b.Property<int>("ExerciceInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("VariableId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<float>("Valeur")
                        .HasColumnType("real");

                    b.HasKey("ExerciceInstanceId", "VariableId");

                    b.HasIndex("VariableId");

                    b.ToTable("VariablesInstance");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Question.QuestionChoix", b =>
                {
                    b.HasBaseType("ProjetSynthese.Server.Models.Question.QuestionBase");

                    b.HasDiscriminator().HasValue("Choix");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Question.QuestionDeroulante", b =>
                {
                    b.HasBaseType("ProjetSynthese.Server.Models.Question.QuestionBase");

                    b.HasDiscriminator().HasValue("Deroulant");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Question.QuestionNumerique", b =>
                {
                    b.HasBaseType("ProjetSynthese.Server.Models.Question.QuestionBase");

                    b.HasDiscriminator().HasValue("Numerique");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Question.QuestionTroue", b =>
                {
                    b.HasBaseType("ProjetSynthese.Server.Models.Question.QuestionBase");

                    b.Property<string>("ReponseTexte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Troue");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Reponse.ReponseChoix", b =>
                {
                    b.HasBaseType("ProjetSynthese.Server.Models.Reponse.ReponseBase");

                    b.Property<bool>("IsAnswer")
                        .HasColumnType("bit");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Choix");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Reponse.ReponseDeroulante", b =>
                {
                    b.HasBaseType("ProjetSynthese.Server.Models.Reponse.ReponseBase");

                    b.Property<bool>("IsAnswer")
                        .HasColumnType("bit");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.ToTable("Reponses", t =>
                        {
                            t.Property("IsAnswer")
                                .HasColumnName("ReponseDeroulante_IsAnswer");

                            t.Property("Position")
                                .HasColumnName("ReponseDeroulante_Position");
                        });

                    b.HasDiscriminator().HasValue("Deroulant");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Reponse.ReponseNumerique", b =>
                {
                    b.HasBaseType("ProjetSynthese.Server.Models.Reponse.ReponseBase");

                    b.Property<int?>("ChiffreApresVirgule")
                        .HasColumnType("int");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("bit");

                    b.Property<float?>("MargeErreur")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("Numerique");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Reponse.ReponseTroue", b =>
                {
                    b.HasBaseType("ProjetSynthese.Server.Models.Reponse.ReponseBase");

                    b.Property<int>("PositionTexte")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Troue");
                });

            modelBuilder.Entity("GroupeCoursEtudiant", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.Etudiant", null)
                        .WithMany()
                        .HasForeignKey("EtudiantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjetSynthese.Server.Models.GroupeCours", null)
                        .WithMany()
                        .HasForeignKey("GroupeCoursId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Activite", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.Enseignant", "Auteur")
                        .WithMany("ListeActiviteAuteur")
                        .HasForeignKey("AuteurId");

                    b.HasOne("ProjetSynthese.Server.Models.GroupeCours", "GroupeCours")
                        .WithMany("Activities")
                        .HasForeignKey("GroupeCoursId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Auteur");

                    b.Navigation("GroupeCours");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Enseignant", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "utilisateur")
                        .WithOne()
                        .HasForeignKey("ProjetSynthese.Server.Models.Enseignant", "UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("utilisateur");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Etudiant", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "utilisateur")
                        .WithOne()
                        .HasForeignKey("ProjetSynthese.Server.Models.Etudiant", "UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("utilisateur");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.ExcludeRange", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.Variable", "Variable")
                        .WithMany("ExcludeRanges")
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variable");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Exercice", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.Activite", "Activite")
                        .WithMany("Exercices")
                        .HasForeignKey("ActiviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetSynthese.Server.Models.Enseignant", "Auteur")
                        .WithMany()
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Activite");

                    b.Navigation("Auteur");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.ExerciceInstance", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.Etudiant", null)
                        .WithMany("ExercicesInstance")
                        .HasForeignKey("EtudiantId");

                    b.HasOne("ProjetSynthese.Server.Models.Exercice", "Exercice")
                        .WithMany("ExercicesInstance")
                        .HasForeignKey("ExerciceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercice");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.GroupeCours", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.Enseignant", "Enseignant")
                        .WithMany("GroupeCours")
                        .HasForeignKey("EnseignantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enseignant");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Indice", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.Question.QuestionBase", "Question")
                        .WithMany("Indices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Notification", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.Activite", "Activite")
                        .WithMany()
                        .HasForeignKey("ActiviteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Activite");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Question.QuestionBase", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.Exercice", "Exercice")
                        .WithMany("Questions")
                        .HasForeignKey("ExerciceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercice");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.RappelActivite", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.Activite", "Activite")
                        .WithMany("RappelsActivite")
                        .HasForeignKey("ActiviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetSynthese.Server.Models.Etudiant", "Utilisateur")
                        .WithMany("RappelsActivite")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activite");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Reponse.ReponseBase", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.Question.QuestionBase", "Question")
                        .WithMany("Reponses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.ReponseUtilisateur", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.ExerciceInstance", "ExerciceInstance")
                        .WithMany("ReponsesUtilisateur")
                        .HasForeignKey("ExerciceInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetSynthese.Server.Models.Question.QuestionBase", "Question")
                        .WithMany("ReponsesUtilisateur")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExerciceInstance");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Variable", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.Exercice", "Exercice")
                        .WithMany("Variables")
                        .HasForeignKey("ExerciceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercice");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.VariableInstance", b =>
                {
                    b.HasOne("ProjetSynthese.Server.Models.ExerciceInstance", "ExerciceInstance")
                        .WithMany("VariablesInstance")
                        .HasForeignKey("ExerciceInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetSynthese.Server.Models.Variable", "Variable")
                        .WithMany("VariablesInstance")
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExerciceInstance");

                    b.Navigation("Variable");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Activite", b =>
                {
                    b.Navigation("Exercices");

                    b.Navigation("RappelsActivite");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Enseignant", b =>
                {
                    b.Navigation("GroupeCours");

                    b.Navigation("ListeActiviteAuteur");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Etudiant", b =>
                {
                    b.Navigation("ExercicesInstance");

                    b.Navigation("RappelsActivite");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Exercice", b =>
                {
                    b.Navigation("ExercicesInstance");

                    b.Navigation("Questions");

                    b.Navigation("Variables");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.ExerciceInstance", b =>
                {
                    b.Navigation("ReponsesUtilisateur");

                    b.Navigation("VariablesInstance");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.GroupeCours", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Question.QuestionBase", b =>
                {
                    b.Navigation("Indices");

                    b.Navigation("Reponses");

                    b.Navigation("ReponsesUtilisateur");
                });

            modelBuilder.Entity("ProjetSynthese.Server.Models.Variable", b =>
                {
                    b.Navigation("ExcludeRanges");

                    b.Navigation("VariablesInstance");
                });
#pragma warning restore 612, 618
        }
    }
}
